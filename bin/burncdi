#!/bin/bash
##############################################################################################################
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
##############################################################################################################
# Copyright (c) 2012, Nold, https://nold.in
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################################################

# Test if cdirip is available in $PATH
if ! type cdirip &> /dev/null ; then echo "Please install cdirip" ;  exit 1 ; fi

# Test if cdrecord or wodim are available in $PATH
if ! type wodim &> /dev/null ; then
    if ! type cdrecord &> /dev/null ; then
        echo "Please install wodim / cdrecord"
        exit 1
    else
        BURNBIN=cdrecord
    fi
else
    BURNBIN=wodim
fi

function show_help {
    if [ $# -gt 0 ] ; then
        echo "---------------------------------------------------"
        echo $@
        echo "---------------------------------------------------"
    fi
    echo "BurnCDI - Script to burn CDI-Images to disk using Linux"
    echo "Usage:"
    echo "       $0 [-f] [-c <DRIVE>] [-s <SPEED>]  <CDI-File>"
    echo
    echo "       -f         | Force burning of Image & enable overburning"
    echo "       -c <DRIVE> | Path to CD writer (default is autodetect)"
    echo "       -s <SPEED> | Speed to burn at (defaults to full speed)"
    echo "       -n         | Not really; just perform a dummy write"
    echo "       -v         | Verbose: show commands before running them"
    exit 1
}

function cleanup {
    if [ ! -z "$EXT_DIR" ] && [ -d "$EXT_DIR" ] ; then
        rm -rf --one-file-system "${EXT_DIR}"
    fi
}

OVERBURN=""
SPEED=""
NOTREALLY=""
DEVICE=""
VECHO=":"; VFLAG=""
while getopts "fc:s:nv" opt; do
    case $opt in
        c)
            DEVICE="dev=$OPTARG"
            if [ ! -e $OPTARG ]; then
		show_help "Device '$OPTARG' does not exist"
		exit 1
	    fi
            ;;
        f)
            OVERBURN="-overburn"
            ;;
        s)
            SPEED="-speed $OPTARG"
	    ;;
        n)
            NOTREALLY="-dummy"
	    ;;
        v)
            VECHO="echo"
            VFLAG="-v"
	    ;;
        :)
            show_help "-$opt requires argument."
            ;;
        *)
            show_help
            ;;
    esac
done

CDIIMG="${@:$OPTIND:1}"
if [ ! -f "$CDIIMG" ] ; then
    show_help "ERROR: Couldn't open CDI-File: $CDIIMG"
fi

trap cleanup EXIT SIGINT SIGKILL
EXT_DIR=$(mktemp -d)
if [ -d ${EXT_DIR} ] ; then
    cdirip "${CDIIMG}" "${EXT_DIR}" -cdrecord || \
    show_help "ERROR while unpacking CDI using cdirip!"
fi

unset BLOCKSIZE			# In case user set blocksize=human for du.
if [ $(du -s ${EXT_DIR} 2> /dev/null | awk '{print $1}') -ge 700000 -a "$OVERBURN" == "" ] ; then
    echo "---------------------------------------------------"
    echo "CRITICAL_ERROR: Extracted files are too big, to fit on a CD-R..."
    echo "If you want to force the burn process, try -f"
    echo "Aborting..."
    echo "---------------------------------------------------"
    cleanup
    exit 3
elif [ "$OVERBURN" != "" ] ; then
    echo "NOTICE: Skipping Filesize Check..."
fi

echo
echo "---------------------------------------------------"
echo "Starting burning process using $BURNBIN"

COUNTER=0
RET=0
while true ; do
    COUNTER=$(($COUNTER + 1))
    NUMBER=$(printf %02u $COUNTER)
    ISOFILE=${EXT_DIR}/tdata${NUMBER}.iso
    WAVFILE=${EXT_DIR}/taudio${NUMBER}.wav

    echo "---------------------------------------------------"
    COMMAND="$BURNBIN ${VFLAG} ${DEVICE} ${SPEED} ${OVERBURN} ${NOTREALLY} "

    if [ -f $WAVFILE ]; then
        echo "Burning Part $NUMBER: '$WAVFILE'"
        COMMAND+=" -tao -multi -audio $WAVFILE"
    elif [ -f $ISOFILE ]; then
        echo "Burning Part $NUMBER: '$ISOFILE'"
        COMMAND+=" -tao -multi -xa $ISOFILE"
    else
	echo "No more parts" 
	break			# Exit infinite loop
    fi

    $VECHO $COMMAND
    if ! $COMMAND; then
	RET=1			# Bad burn
	cat >&2 <<-EOF

		!!!
		ERROR running $COMMAND
		!!!

	EOF
	read  -p "Continue burning anyway? [Y/n] " -n 1 -s
	case "$REPLY" in
	    N|n) echo "Quitting."
		 break
		 ;;
	    *)   echo "Continuing..."
		 continue
		 ;;
	esac
    fi
done

echo
echo "---------------------------------------------------"
echo "Burning process... Done"
echo -n "Cleaning up... "
cleanup
echo "Done"

echo -n "Ejecting Disk... "
eject ${DEVICE#dev=} &>/dev/null
echo "Done"

if [ $RET -eq 0 ] ; then
    echo "---------------------------------------------------"
    echo "Everything looks fine... Good Game!"
    echo "---------------------------------------------------"
else
    echo "---------------------------------------------------"
    echo "An error occurred! Check $BURNBIN output"
    echo "---------------------------------------------------"
    echo
fi
exit $RET
