#!/bin/bash
##############################################################################################################
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
##############################################################################################################
# Copyright (c) 2012, Nold, http://nold.freeunix.net
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in 
#   the documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################################################
echo "mksdiso Ver. 0.7 | By Nold 2013 | Visit: http://nold.freeunix.net" 

if [ $UID -ne 0 ] ; then
	echo "Must be executed as root"
	exit 1
fi

function usage() {
	echo "Usage: $(basename $0) < -h | -k > <INPUT-DIR/-ISO/-CDI> <OUTPUT-DIR/-ISO>"
	echo -e "\t-h | Create ISO from Homebrew"
	echo -e "\t-k | Create ISO from Katana Image\n"	
}

function hack_lba() { #ARGs: target-dir
	if [ ! -f $1/1ST_READ.BIN ] ; then
		if [ -f $1/1st_read.bin ] ; then
			mv $1/1st_read.bin $1/1ST_READ.BIN
		else
			echo "Couldn't read 1ST_READ.BIN"
			return 1
		fi
	fi 
	cp /opt/mksdiso/katana/IP.BIN .
	echo -e -n "$1/1ST_READ.BIN\nIP.BIN\n0\n" | binhack32 
	rm IP.BIN
	return 0
}

#Reads out the name of the "1ST_READ.BIN" - It's different in some games...
function extract_1st_read_name() { #ARGs: ISO-File
	ISO=$1
	echo $(dd if=$ISO skip=96 count=16 bs=1 2>/dev/null | grep \.BIN | awk '{print $1}')
}

function extract_image() { #ARGs File, Destionation Path
	IN_FILE=$1
	OUT_PATH=$2
	EXT_PATH=$(dirname $OUT_PATH)/cdi_$(basename $IN_FILE)
	
	MOUNTPOINT="/opt/mksdiso/mnt/$(basename $OUT_PATH)"
	mkdir "$MOUNTPOINT" "$OUT_PATH" &> /dev/null

	#CDI file?
	if [ "$(echo $IN_FILE | grep \.cdi$)" != "" ] ; then
		mkdir "$EXT_PATH" &> /dev/null
		cdirip $IN_FILE $EXT_PATH | tee $IN_FILE.out
		if [ $(cat $IN_FILE.out | wc -l) -le 7 ] ; then
			echo "cdirip dosn't look good - Exiting!"
			rm -rf $EXT_PATH $OUT_PATH $IN_FILE.out	
			exit 1
		fi
		rm $EXT_PATH/taudio*.wav $EXT_PATH/tdisc.cue  &> /dev/null

		echo "Trying to fix extracted iso..."
		OG_IFS=$IFS
		IFS=$'\n'
		for line in $(grep ^Saving $IN_FILE.out | grep ISO); do
			ISO_NR=$(echo $line | awk '{print $3}')
			if [ $ISO_NR -lt 9 ] ; then
				ISO_NR="0$ISO_NR"
			fi

			LBA=$(echo $line | awk '{print $9}')
			
			echo "Extracting META-Informations to obtain 1ST_READ.BIN name..."
			SR_READ=$(extract_1st_read_name $EXT_PATH/tdata$ISO_NR.iso)
			if [ "$SR_READ" == "1ST_READ.BIN" ] ;then
				echo "Look's fine... Everything where it belongs!"
			elif [ "$SR_READ" != "" ] ; then
                              	echo "Found that bit** as $SR_READ!"
			else
				echo "No 1ST_READ.BIN found in tdata$ISO_NR.iso!"
				if [ "$ISO_NR" == "01" ] ; then
					echo "Let's hope it has some data.. moving as fixed!"
					mv $EXT_PATH/tdata$ISO_NR.iso $EXT_PATH/fixed_tdata$ISO_NR.iso
					continue
				elif [ "$LBA" == "" ] ; then
					echo "Let's try to fix it..."
				fi
			fi
			isofix $EXT_PATH/tdata$ISO_NR.iso $EXT_PATH/fixed_tdata$ISO_NR.iso $LBA && rm $EXT_PATH/tdata$ISO_NR.iso
		done
		rm $IN_FILE.out bootfile.bin header.iso
		
		echo "Extracting data from image... This could take a while..."	
		for file in $(ls -1 $EXT_PATH/fixed_tdata*.iso); do
			mount -o loop -t iso9660 $file $MOUNTPOINT
			if [ $? -eq 0 ] ; then
				cp -r $MOUNTPOINT/* $OUT_PATH
				umount $MOUNTPOINT
			fi
			rm $file
		done
	else
		#Just a single ISO
		echo "Extracting META-Informations to obtain 1ST_READ.BIN name.."
		SR_READ=$(extract_1st_read_name $IN_FILE)
		echo "Extracting Data from Image... This could take a while..."	
		mount -o loop -t iso9660 "$IN_FILE" "$MOUNTPOINT"
		cp -r $MOUNTPOINT/* $OUT_PATH
		umount $MOUNTPOINT 
	fi
	
	#Move 1st_read.bin where it belongs!
	if [ "$SR_READ" != "1ST_READ.BIN" ] ; then
		echo "Moving that bit** to 1ST_READ.BIN!"
		mv "$OUT_PATH/$(ls -1 $OUT_PATH | grep -i $SR_READ)" "$OUT_PATH/1ST_READ.BIN"
	fi	

	rm -r $MOUNTPOINT $EXT_PATH &> /dev/null
}

function create_homebrew_iso() { #ARGs: Source, Destination, Destination Name
	IN_DIR=$1
	
	OUT_DIR=$2
	OUT_NAME=$3

	if [ ! -f "$IN_DIR/1ST_READ.BIN" ] ; then
		if [ -f "$IN_DIR/1st_read.bin" ] ; then
			mv "$IN_DIR/1st_read.bin" "$IN_DIR/1ST_READ.BIN"
		fi		
	fi
	
	cp "$IN_DIR/1ST_READ.BIN" "/tmp/1ST_READ.BIN"
	echo "Descrambling 1ST_READ.BIN..."
	scramble -d "$IN_DIR/1ST_READ.BIN" "$IN_DIR/unscrambled.bin" || (echo "ERROR while descrambling!" && return 1)
	rm "$IN_DIR/1ST_READ.BIN"
	mv "$IN_DIR/unscrambled.bin" "$IN_DIR/1ST_READ.BIN"
	
	echo "Creating ISO..."
	mkisofs -V $OUT_NAME -G /opt/mksdiso/homebrew/IP.BIN -J -r -l -o "$OUT_DIR/$OUT_NAME" "$IN_DIR"
	rm "$IN_DIR/1ST_READ.BIN"
	mv "/tmp/1ST_READ.BIN" "$IN_DIR/1ST_READ.BIN"
	echo "Done"
}

function create_katana_iso() { #ARGs: Source, Destination, Destination Name
	IN_DIR=$1
		
	OUT_DIR=$2
	OUT_NAME=$3
	
	echo "Hacking LBA..."
	hack_lba $IN_DIR  
	echo "Creating ISO..."
	mkisofs -V $OUT_NAME -G /opt/mksdiso/katana/IP.BIN -J -r -l -o  "$OUT_DIR/$OUT_NAME" "$IN_DIR" && echo Done!
}

#Check Parameters
if [ $# -ne 3 -o "$1" != "-h" -a "$1" != "-k" ] ; then
	usage
	exit 1
fi

#Check if Source is a directory or a fle
IN_DIR=$(dirname $2)
if [ -d "$2" ] ; then
	DEL_IN_DIR=0
else
	IN_NAME=$(basename $2)

	mkdir $IN_DIR/ext_$IN_NAME	
	extract_image $IN_DIR/$IN_NAME $IN_DIR/ext_$IN_NAME
	IN_DIR="$IN_DIR/ext_$IN_NAME"
	DEL_IN_DIR=1
fi

#Check if Destination is a directory or a fle
OUT_DIR=$(dirname $3)
if [ -d "$3" ] ; then
	OUT_NAME="$(echo $IN_NAME | cut -f1 -d.)-sd.iso"
else
	OUT_NAME=$(basename $3)
fi

#Choose what to do
if [ "$1" == "-k" ] ; then
	create_katana_iso $IN_DIR $OUT_DIR $OUT_NAME
else
	create_homebrew_iso $IN_DIR $OUT_DIR $OUT_NAME
fi

echo "All done! Saving as $OUT_NAME"

if [ $DEL_IN_DIR -eq 1 ] ; then
	rm -rf $IN_DIR
fi
